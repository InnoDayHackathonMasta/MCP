package com.siemens.e.hackathonmcp;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.Spannable;
import android.text.TextWatcher;
import android.text.method.MovementMethod;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.siemens.e.hackathonmcp.app.ChainThreadStatus;
import com.siemens.e.hackathonmcp.app.ClientQueryThreadStatus;

public class MainActivity extends Activity {

	private static boolean DEBUG = true;
	private static final String TAG = "MCP:MainActivity";

	static Handler handler = new Handler();

	BluetoothAdapter mBluetoothAdapter = null;
	ClientQueryThread cqt = null;
	ChainEndServerAcceptThread cat = null;
	ChainThread ct = null;

	Button btnStartMCP = null;

	app appObj = null;
	private TextView tvLogOut;
	private Button btnKillChain;
	private Button btnManualTextSend;
	private Button btnReorderSend;
	private Button btnStart;
	private Button btnStop;
	private EditText edtReorder;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		appObj = (app)getApplication();

		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		Log.i(TAG, "enabling Bluetooth");
		mBluetoothAdapter.enable();

		// Init: Set ourselve to be the chain end 
		appObj.setCurrentTail(mBluetoothAdapter.getAddress());

		btnStartMCP = (Button)findViewById(R.id.main_btn_be_mcp);
		btnKillChain = (Button) findViewById(R.id.main_btn_kill_chain);
		btnManualTextSend = (Button) findViewById(R.id.main_btn_manualtext_send);
		btnReorderSend = (Button) findViewById(R.id.main_btn_reorder_send);
		btnStart = (Button) findViewById(R.id.main_btn_start);
		btnStop = (Button) findViewById(R.id.main_btn_stop);

		edtReorder = (EditText)findViewById(R.id.main_edt_reordertext);

		btnKillChain.setEnabled(false);
		btnManualTextSend.setEnabled(false);
		//		btnReorderSend.setEnabled(false);
		btnStart.setEnabled(false);
		btnStop.setEnabled(false);

		tvLogOut = (TextView) findViewById(R.id.main_txt_log_output);

		tvLogOut.setMovementMethod(new ScrollingMovementMethod());

		btnStartMCP.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				// Lets make ourself discoverable
				ensureDiscoverable();

				// Start our two Treads accepting connections
				cqt = new ClientQueryThread(false);
				cqt.start();

				cat = new ChainEndServerAcceptThread(false);
				cat.start();

				btnStartMCP.setEnabled(false);
			}
		});

		btnReorderSend.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				String newOrder = edtReorder.getText().toString(); 
				sendReorderString(newOrder);
			}
		});

	}

	private void sendReorderString (String newOrder) {

		int numChainMembers = appObj.getCurrentTailId();

		StringBuilder messageToSend = new StringBuilder("R,");

		for (int i=0; i < numChainMembers; i++) {
			messageToSend.append(i);
		}

		messageToSend.append("," + newOrder);

		sendChainMessage(messageToSend.toString());
		shutDownClientQueryThread ();
		edtReorder.setEnabled(false);
		btnReorderSend.setEnabled(false);
		btnManualTextSend.setEnabled(true);
		btnStart.setEnabled(true);
		btnStop.setEnabled(true);

	}

	private void shutDownClientQueryThread() {

		if (appObj.getClientQueryThreadStatus() == ClientQueryThreadStatus.ACTIVE) {
			if (cqt != null) {
				cqt.cancel();
				appObj.setClientQueryThreadStatus(ClientQueryThreadStatus.OFF);
			} else {
				AppendToLogView("was asked to end ClientQueryThread but Thread is NULL");
			}
		} else {
			AppendToLogView("was asked to end ClientQueryThread but Status is already OFF");
		}

	}

	private void sendChar (String character, int logicalId) {
		String messageToSend = "D," + character + "," + logicalId;
		sendChainMessage(messageToSend);
	}

	private void sendChainMessage (String messageToSend) {

		if (appObj.getChainThreadStatus() == ChainThreadStatus.ACTIVE) {
			if (ct != null) {
				ct.write(messageToSend.getBytes());
			} else {
				AppendToLogView("was asked to send: " + messageToSend + " but ChainThread is NULL");
				final int scrollAmount = tvLogOut.getLayout().getLineTop(tvLogOut.getLineCount()) - tvLogOut.getHeight();
				// if there is no need to scroll, scrollAmount will be <=0
				if (scrollAmount > 0)
					tvLogOut.scrollTo(0, scrollAmount);
				else
					tvLogOut.scrollTo(0, 0);
			}

		} else {
			AppendToLogView("was asked to send: " + messageToSend + " but ChainThread is OFF");
		}

	}

	private class ClientQueryThread extends Thread {
		// The local server socket

		private final BluetoothServerSocket mmServerSocket;
		private String mSocketType;

		// Name for the SDP record when creating server socket
		private static final String NAME_INSECURE = "BluetoothChainInsecure";

		// Constants that indicate the current connection state
		public static final int STATE_NONE = 0;       // we're doing nothing
		public static final int STATE_LISTEN = 1;     // now listening for incoming connections
		public static final int STATE_CONNECTING = 2; // now initiating an outgoing connection
		public static final int STATE_CONNECTED = 3;  // now connected to a remote device

		private int mState = 0;

		@SuppressLint("NewApi")
		public ClientQueryThread(boolean secure) {

			if (DEBUG) Log.i(TAG, "ClientQueryThread started");
			BluetoothServerSocket tmp = null;
			mSocketType = secure ? "Secure":"Insecure";

			// Create a new listening server socket
			try {

				tmp = mBluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(NAME_INSECURE, appObj.getBT_UUID_CLIENTINFO());

			} catch (IOException e) {
				Log.e(TAG, "Socket Type: " + mSocketType + "listen() failed", e);
			}
			mmServerSocket = tmp;

			// Set State to active
			appObj.setClientQueryThreadStatus(ClientQueryThreadStatus.ACTIVE);
		}

		public void run() {

			BluetoothSocket mmSocket;
			OutputStream mmOutStream = null;

			if (DEBUG) Log.d(TAG, "Socket Type: " + mSocketType + "BEGIN mAcceptThread" + this);
			setName("ClientQueryThread" + mSocketType);

			BluetoothSocket socket = null;

			// Listen to the server socket if we're not connected
			while (mState != STATE_CONNECTED) {
				try {
					// This is a blocking call and will only return on a
					// successful connection or an exception
					socket = mmServerSocket.accept();
				} catch (IOException e) {
					Log.e(TAG, "Socket Type: " + mSocketType + "accept() failed", e);
					break;
				}

				// If a connection was accepted
				if (socket != null) {

					byte[] buffer = new byte[1024];  // buffer store for the stream
					int bytes; // bytes returned from read()

					if (DEBUG) Log.i(TAG, "ClientQueryThread has established a connection");

					// Get the output stream
					try {
						mmOutStream = socket.getOutputStream();
					} catch (IOException e) { 
						if (DEBUG) Log.d(TAG, "ClientQueryThread: Could not get Outputstream from socket");
					}

					// Keep listening to the InputStream until an exception occurs
					try {
						// Read from the InputStream

						String remoteName;
						remoteName = socket.getRemoteDevice().getName();

						if (remoteName == null ) {
							remoteName = "unknown";
						}
						Log.d(TAG, "ClientQueryThread: Trying to send MAC Adress to " + remoteName);

						// Post Update to log textview in Main Screen
						String logViewText = "Client (" + remoteName + ") asked for tail end";
						if (handler.post(new AppendToLogViewRunnable(logViewText))== false) Log.d(TAG, "could not place Runnable in queue") ;

						String message = appObj.getCurrentTail() + "," + String.valueOf(appObj.getCurrentTailId()+1);

						mmOutStream.write(message.getBytes());
						mmOutStream.flush(); 

						Log.d(TAG, "Successfully sent Message to " +remoteName + ":" + message); 

					} catch (IOException e) {
						Log.d(TAG, "Could not send MacAdress+id to querieng thread");
					}

				}
			}
			if (DEBUG) Log.i(TAG, "END mAcceptThread, socket Type: " + mSocketType);

		}

		public void cancel() {
			if (DEBUG) Log.d(TAG, "Socket Type" + mSocketType + "cancel " + this);
			try {
				mmServerSocket.close();
			} catch (IOException e) {
				Log.e(TAG, "Socket Type" + mSocketType + "close() of server failed", e);
			}
		}
	}


	private class ChainEndServerAcceptThread extends Thread {
		// The local server socket
		private final BluetoothServerSocket mmServerSocket;
		private String mSocketType;

		// Name for the SDP record when creating server socket
		private static final String NAME_INSECURE = "BluetoothChainEndInsecure";

		// Constants that indicate the current connection state
		public static final int STATE_NONE = 0;       // we're doing nothing
		public static final int STATE_LISTEN = 1;     // now listening for incoming connections
		public static final int STATE_CONNECTING = 2; // now initiating an outgoing connection
		public static final int STATE_CONNECTED = 3;  // now connected to a remote device

		private int mState = 0;

		@SuppressLint("NewApi")
		public ChainEndServerAcceptThread(boolean secure) {

			if (DEBUG) Log.i(TAG, "+++ Accept Thread for Chain End started +++");
			BluetoothServerSocket tmp = null;
			mSocketType = secure ? "Secure":"Insecure";

			// Create a new listening server socket
			try {

				tmp = mBluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(NAME_INSECURE, appObj.getBT_UUID_CHAIN());

			} catch (IOException e) {
				Log.e(TAG, "Socket Type: " + mSocketType + "listen() failed", e);
			}

			mmServerSocket = tmp;

		}

		public void run() {
			if (DEBUG) Log.d(TAG, "Socket Type: " + mSocketType + "BEGIN ChainServer Thread" + this);
			setName("ClientQueryThread" + mSocketType);

			BluetoothSocket socket = null;

			// Listen to the server socket if we're not connected
			while (mState != STATE_CONNECTED) {
				try {
					// This is a blocking call and will only return on a
					// successful connection or an exception
					socket = mmServerSocket.accept();
				} catch (IOException e) {
					Log.e(TAG, "Socket Type: " + mSocketType + "accept() failed", e);
					break;
				}

				// If a connection was accepted
				if (socket != null) {
					if (DEBUG) Log.i(TAG, "+++++++ WE GOT A CONNECTION FOR THE CHAIN END +++++++");

					// Start a ChainThread and pass the socket 
					ct = new ChainThread(socket);
					ct.start();

				}
			}
			if (DEBUG) Log.i(TAG, "END mAcceptThread, socket Type: " + mSocketType);

		}

		public void cancel() {
			if (DEBUG) Log.d(TAG, "Socket Type" + mSocketType + "cancel " + this);
			try {
				mmServerSocket.close();
			} catch (IOException e) {
				Log.e(TAG, "Socket Type" + mSocketType + "close() of server failed", e);
			}
		}
	}

	private class ChainThread extends Thread {
		private final BluetoothSocket mmSocket;
		private final InputStream mmInStream;
		private final OutputStream mmOutStream;

		public ChainThread(BluetoothSocket socket) {
			mmSocket = socket;
			InputStream tmpIn = null;
			OutputStream tmpOut = null;

			Log.d(TAG, socket.getRemoteDevice().getName() + " is first chain member");

			// Get the input and output streams, using temp objects because
			// member streams are final
			try {
				tmpIn = socket.getInputStream();
				tmpOut = socket.getOutputStream();
			} catch (IOException e) { }

			mmInStream = tmpIn;
			mmOutStream = tmpOut;
			
			// Post Update to log textview in Main Screen
			if (handler.post(new AppendToLogViewRunnable(socket.getRemoteDevice().getName() + " is first chain member")
					) == false) Log.d(TAG, "could not place Runnable in queue") ;

			//TODO: Post UI changes
			
			
		}


		/**
		 * Reads and writes Data to the chain
		 */
		public void run() {
			byte[] buffer = new byte[1024];  // buffer store for the stream
			int bytes; // bytes returned from read()
			Log.d(TAG, "ChainServer: We made it to connect!");

			appObj.setChainThreadStatus(ChainThreadStatus.ACTIVE);
			//			btnReorderSend.setEnabled(true);
			//			btnKillChain.setEnabled(true);

			// Endless loop
			while (appObj.getChainThreadStatus() == ChainThreadStatus.ACTIVE) {

				// Keep listening to the InputStream until an exception occurs
				try {
					// Read from the InputStream
					Log.d(TAG, "Chain: Waiting for Data...");

					bytes = mmInStream.read(buffer);

					// handle tail's macaddress update
					// ASCII a = 97 = Announcement
					if(buffer[0] == 97){

						// Store the Mac Adress of the new Chain Tail and increase the physical ID (+1)
						String newTailMac = Utility.extractMAC(buffer, 1);
						appObj.setCurrentTail(newTailMac);
						appObj.currentTailId +=1;
						Log.d(TAG, "new Tail MAC: " + newTailMac);
						
						handler.post(new AppendToLogViewRunnable("A," + newTailMac));
						
					}

				} catch (IOException e) {
					Log.d(TAG, "ChainServer: Chain dropped (IO Exception)");
					appObj.setChainThreadStatus(ChainThreadStatus.OFF);
					handler.post(new Runnable() {
						
						@Override
						public void run() {
							// TODO Auto-generated method stub
							handler.post(new AppendToLogViewRunnable("ChainServer: Connection crashed. App stops working"));
						}
					});
				}
			}
		}

		/* Call this from the main activity to send data to the remote device */
		public void write(byte[] bytes) {
			try {
				mmOutStream.write(bytes);
				Log.d(TAG, "ChainThread: Sending data to Chain");
			} catch (IOException e) { 
				Log.d(TAG, "IO Error writing to Chain", e);
			}
		}

		/* Call this from the main activity to shutdown the connection */
		public void cancel() {
			try {
				// Tell Thread to stop
				appObj.setChainThreadStatus(ChainThreadStatus.OFF);

				// Start listening again for incoming connections
				cat = new ChainEndServerAcceptThread(false);
				cat.start();

				mmSocket.close();
			} catch (IOException e) { }
		}
	}

	private void ensureDiscoverable() {
		if(DEBUG) Log.d(TAG, "ensure discoverable");
		if (mBluetoothAdapter.getScanMode() !=
				BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
			Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
			discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
			startActivity(discoverableIntent);
		}
	}

	
	/**
	 * Utility function to append a line to the tvLogOut TextView which automagically scrolls down
	 * to the last / most recent line.
	 * 
	 * @param logLine
	 */
	private void AppendToLogView (String logLine) {
		tvLogOut.append(logLine + "\n");

		// Do the scroll stuff
		final int scrollAmount = tvLogOut.getLayout().getLineTop(tvLogOut.getLineCount()) - tvLogOut.getHeight();
		// if there is no need to scroll, scrollAmount will be <=0
		if (scrollAmount > 0)
			tvLogOut.scrollTo(0, scrollAmount);
		else
			tvLogOut.scrollTo(0, 0);
	}

	/**
	 * Wraps AppendToLogView into a Runnable for the lovely .post() calls
	 * @author gries01d
	 *
	 */
	public class AppendToLogViewRunnable implements Runnable {

		protected String logLine; 

		public AppendToLogViewRunnable (String logLine) {
			this.logLine = logLine;
		}

		@Override
		public void run() {
			// Append Line
			AppendToLogView (logLine);
		}

	}

	
}
